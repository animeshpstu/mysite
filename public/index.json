[{"categories":["CTF","Reversing"],"content":"This is a writeup of find_the_main","date":"2021-05-03","objectID":"/first_post/","tags":["ctf","reversing"],"title":"CTF BD find_the_main Writeup","uri":"/first_post/"},{"categories":["CTF","Reversing"],"content":"Challenge Description This is a ctf challenge made by me for CTF Community Bangladesh. Challenge Name: find_the_main Challenge Type: Reversing Challenge Difficulty: Medium/Hard Flag Format: CTF_BD{Fake_Flag_Here} ","date":"2021-05-03","objectID":"/first_post/:1:0","tags":["ctf","reversing"],"title":"CTF BD find_the_main Writeup","uri":"/first_post/"},{"categories":["CTF","Reversing"],"content":"Initial Enumeration First of all a file command shows the following thing. â”Œâ”€â”€(rootðŸ’€hackingmachine)-[/home/animesh] â””â”€# file find_the_main find_the_main: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=f737cc0f8ef35967a467e31f2ea574c568738ee0, for GNU/Linux 3.2.0, stripped â”Œâ”€â”€(rootðŸ’€hackingmachine)-[/home/animesh] â””â”€# From the output, It can be easily observed that the binary is a stripped binary. As it is a stripped binary we have to find the main functions. So, first letâ€™s find the main function to debug. I have opened the binary in ghidra to examine it better. And we can see the following entry() function. void entry(undefined8 param_1,undefined8 param_2,undefined8 param_3) { undefined8 in_stack_00000000; undefined auStack8 [8]; __libc_start_main(FUN_001013c6,in_stack_00000000,\u0026stack0x00000008,FUN_00101430,FUN_00101490, param_3,auStack8); do { /* WARNING: Do nothing block with infinite loop */ } while( true ); } Here what is hapenning, The __libc_start_main() function is loading main function basically. So the function FUN_001013c6 is basically the main function. Letâ€™s see what security mechanism is there â”Œâ”€â”€(rootðŸ’€hackingmachine)-[/home/animesh] â””â”€# gdb ./find_the_main GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git Copyright (C) 2021 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u003chttp://gnu.org/licenses/gpl.html\u003e This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: \u003chttps://www.gnu.org/software/gdb/bugs/\u003e. Find the GDB manual and other documentation resources online at: \u003chttp://www.gnu.org/software/gdb/documentation/\u003e. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\"... Reading symbols from ./find_the_main... (No debugging symbols found in ./find_the_main) gdb-peda$ checksec CANARY : disabled FORTIFY : disabled NX : ENABLED PIE : ENABLED RELRO : Partial gdb-peda$ So PIE and NX are enabled. So, it will basically randomize the adresses. But gdb stop the randomization after the first run. So, letâ€™s run one time and the collect the entry() function and main function address. Starting program: /home/animesh/find_the_main Please enter the secret code - 12131 You are not authorized. [Inferior 1 (process 18260) exited normally] Warning: not running gdb-peda$ The program is asking for a secret code. Letâ€™s note it for now and proceed. ","date":"2021-05-03","objectID":"/first_post/:2:0","tags":["ctf","reversing"],"title":"CTF BD find_the_main Writeup","uri":"/first_post/"},{"categories":["CTF","Reversing"],"content":"Finding Flag gdb-peda$ info file Symbols from \"/home/animesh/find_the_main\". Local exec file: `/home/animesh/find_the_main', file type elf64-x86-64. Entry point: 0x555555555080 0x00005555555542a8 - 0x00005555555542c4 is .interp 0x00005555555542c4 - 0x00005555555542e8 is .note.gnu.build-id 0x00005555555542e8 - 0x0000555555554308 is .note.ABI-tag 0x0000555555554308 - 0x000055555555432c is .gnu.hash 0x0000555555554330 - 0x0000555555554420 is .dynsym 0x0000555555554420 - 0x00005555555544ca is .dynstr 0x00005555555544ca - 0x00005555555544de is .gnu.version \u003c!--Snip--\u003e gdb-peda$ we got the entry point - 0x555555555080 letâ€™s examin next 25 instructions to get the adsress of main function. gdb-peda$ x/25i 0x555555555080 0x555555555080: xor ebp,ebp 0x555555555082: mov r9,rdx 0x555555555085: pop rsi 0x555555555086: mov rdx,rsp 0x555555555089: and rsp,0xfffffffffffffff0 0x55555555508d: push rax 0x55555555508e: push rsp 0x55555555508f: lea r8,[rip+0x3fa] # 0x555555555490 0x555555555096: lea rcx,[rip+0x393] # 0x555555555430 0x55555555509d: lea rdi,[rip+0x322] # 0x5555555553c6 0x5555555550a4: call QWORD PTR [rip+0x2f36] # 0x555555557fe0 0x5555555550aa: hlt 0x5555555550ab: nop DWORD PTR [rax+rax*1+0x0] 0x5555555550b0: lea rdi,[rip+0x2f91] # 0x555555558048 0x5555555550b7: lea rax,[rip+0x2f8a] # 0x555555558048 0x5555555550be: cmp rax,rdi 0x5555555550c1: je 0x5555555550d8 0x5555555550c3: mov rax,QWORD PTR [rip+0x2f0e] # 0x555555557fd8 0x5555555550ca: test rax,rax 0x5555555550cd: je 0x5555555550d8 0x5555555550cf: jmp rax 0x5555555550d1: nop DWORD PTR [rax+0x0] 0x5555555550d8: ret 0x5555555550d9: nop DWORD PTR [rax+0x0] 0x5555555550e0: lea rdi,[rip+0x2f61] # 0x555555558048 gdb-peda$ As we can observe, there is a call function on 0x5555555550a4. This basically the __libc_start_main, we have seen previously. 0x55555555509d: lea rdi,[rip+0x322] # 0x5555555553c6 And the previous instruction 0x55555555509d is basically loading the address of the main function which is 0x5555555553c6. Now letâ€™s examine the main function. gdb-peda$ x/50i 0x5555555553c6 0x5555555553c6: push rbp 0x5555555553c7: mov rbp,rsp 0x5555555553ca: sub rsp,0x10 0x5555555553ce: lea rdi,[rip+0xc6b] # 0x555555556040 0x5555555553d5: mov eax,0x0 0x5555555553da: call 0x555555555050 \u003cprintf@plt\u003e 0x5555555553df: lea rax,[rbp-0x4] 0x5555555553e3: mov rsi,rax 0x5555555553e6: lea rdi,[rip+0xc73] # 0x555555556060 0x5555555553ed: mov eax,0x0 0x5555555553f2: call 0x555555555060 \u003c__isoc99_scanf@plt\u003e 0x5555555553f7: mov eax,DWORD PTR [rbp-0x4] 0x5555555553fa: cmp eax,0x31f30b 0x5555555553ff: jne 0x555555555419 0x555555555401: lea rdi,[rip+0xc5b] # 0x555555556063 0x555555555408: call 0x555555555040 \u003cputs@plt\u003e 0x55555555540d: mov eax,0x0 0x555555555412: call 0x555555555165 0x555555555417: jmp 0x555555555425 0x555555555419: lea rdi,[rip+0xc60] # 0x555555556080 0x555555555420: call 0x555555555040 \u003cputs@plt\u003e 0x555555555425: mov eax,0x0 0x55555555542a: leave 0x55555555542b: ret 0x55555555542c: nop DWORD PTR [rax+0x0] 0x555555555430: push r15 0x555555555432: lea r15,[rip+0x29af] # 0x555555557de8 0x555555555439: push r14 0x55555555543b: mov r14,rdx 0x55555555543e: push r13 0x555555555440: mov r13,rsi 0x555555555443: push r12 0x555555555445: mov r12d,edi 0x555555555448: push rbp 0x555555555449: lea rbp,[rip+0x29a0] # 0x555555557df0 0x555555555450: push rbx 0x555555555451: sub rbp,r15 0x555555555454: sub rsp,0x8 0x555555555458: call 0x555555555000 0x55555555545d: sar rbp,0x3 0x555555555461: je 0x55555555547e 0x555555555463: xor ebx,ebx 0x555555555465: nop DWORD PTR [rax] 0x555555555468: mov rdx,r14 0x55555555546b: mov rsi,r13 0x55555555546e: mov edi,r12d 0x555555555471: call QWORD PTR [r15+rbx*8] 0x555555555475: add rbx,0x1 0x555555555479: cmp rbp,rbx 0x55555555547c: jne 0x555555555468 gdb-peda$ So we can see It is basically taking a decimal input and comparing it with 0x31f30b 0x5555555553fa: cmp eax,0x31f30b 0x31f30b is 3273483 in decimal. So, the secret code is 3273483. Now letâ€™s run the program with the","date":"2021-05-03","objectID":"/first_post/:3:0","tags":["ctf","reversing"],"title":"CTF BD find_the_main Writeup","uri":"/first_post/"},{"categories":null,"content":"About Me I am Animesh Khashkel. I am a professional Cyber Security Engineer. I am experienced in various feilds of cyber security like Penetration Testing, Security Audit, Vulnerability Assessment, Incident Management, Cryptography, Reverse Engineering, OSINT etc. My educational background referes to Computer Science and Engineering. I do CTFs in regular basis to improve my skill more. Beside these, I have a good problem solving skill. I have done ACM in my early education period. I have participated in many programming contests. I also know a little bit of Web developing, Android developing, Android Game Developing etc. In my spare time I love to play Chess and I am a FIDE rated chess player. I also do singing and recition in my leisure time. ","date":"2022-04-07","objectID":"/about/:0:1","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Contact Info Email - khashkel.animesh89@gmail.com Linkedin - https://www.linkedin.com/in/animesh89/ Facebook - https://www.facebook.com/animesh.durjoy89/ ","date":"2022-04-07","objectID":"/about/:0:2","tags":null,"title":"About","uri":"/about/"}]